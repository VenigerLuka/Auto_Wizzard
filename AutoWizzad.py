# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tab_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import urllib.request
import json
import os
import hashlib
import threading

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(801, 691)
        MainWindow.setMinimumSize(QtCore.QSize(801, 691))
        MainWindow.setMaximumSize(QtCore.QSize(801, 691))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 216, 202))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(124, 89, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(165, 118, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 216, 202))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 216, 202))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(124, 89, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(165, 118, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 216, 202))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(124, 89, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(251, 216, 202))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(124, 89, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(165, 118, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(124, 89, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(124, 89, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        MainWindow.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("ico/ikonica.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background:white\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 801, 691))
        self.tabWidget.setMinimumSize(QtCore.QSize(801, 691))
        self.tabWidget.setMaximumSize(QtCore.QSize(801, 691))
        self.tabWidget.setStyleSheet("border-color:#f8b195;")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.tab.setPalette(palette)
        self.tab.setStyleSheet("border-color: #f8b195;\n"
"background: #f8b195;")
        self.tab.setObjectName("tab")
        self.continue_button = QtWidgets.QPushButton(self.tab)
        self.continue_button.setGeometry(QtCore.QRect(500, 630, 131, 31))
        self.continue_button.setStyleSheet("background-color:white;\n"
"")
        self.continue_button.setObjectName("continue_button")
        self.cancel_button = QtWidgets.QPushButton(self.tab)
        self.cancel_button.setGeometry(QtCore.QRect(640, 630, 131, 31))
        self.cancel_button.setStyleSheet("background-color:white")
        self.cancel_button.setObjectName("cancel_button")
        self.Media = QtWidgets.QGroupBox(self.tab)
        self.Media.setGeometry(QtCore.QRect(580, 10, 201, 291))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Media.setFont(font)
        self.Media.setAlignment(QtCore.Qt.AlignCenter)
        self.Media.setObjectName("Media")
        self.vlc = QtWidgets.QCheckBox(self.Media)
        self.vlc.setGeometry(QtCore.QRect(10, 20, 161, 17))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("ico/VLC_1.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.vlc.setIcon(icon1)
        self.vlc.setIconSize(QtCore.QSize(16, 16))
        self.vlc.setObjectName("vlc")
        self.gom = QtWidgets.QCheckBox(self.Media)
        self.gom.setGeometry(QtCore.QRect(10, 40, 161, 17))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("ico/gom.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gom.setIcon(icon2)
        self.gom.setObjectName("gom")
        self.winamp = QtWidgets.QCheckBox(self.Media)
        self.winamp.setGeometry(QtCore.QRect(10, 60, 181, 17))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("ico/winamp.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.winamp.setIcon(icon3)
        self.winamp.setObjectName("winamp")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(10, 310, 761, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(18, 17, 73))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 189, 108))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 189, 108, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(18, 17, 73))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 189, 108))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 189, 108, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(248, 177, 149))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.InternetBrowser = QtWidgets.QGroupBox(self.tab)
        self.InternetBrowser.setGeometry(QtCore.QRect(30, 10, 191, 291))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.InternetBrowser.setFont(font)
        self.InternetBrowser.setAlignment(QtCore.Qt.AlignCenter)
        self.InternetBrowser.setObjectName("InternetBrowser")
        self.mozzila = QtWidgets.QCheckBox(self.InternetBrowser)
        self.mozzila.setGeometry(QtCore.QRect(10, 20, 171, 17))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("ico/firefox.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.mozzila.setIcon(icon4)
        self.mozzila.setObjectName("mozzila")
        self.chrome = QtWidgets.QCheckBox(self.InternetBrowser)
        self.chrome.setGeometry(QtCore.QRect(10, 40, 171, 17))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("ico/Dtafalonso-Android-L-Chrome.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.chrome.setIcon(icon5)
        self.chrome.setObjectName("chrome")
        self.opera = QtWidgets.QCheckBox(self.InternetBrowser)
        self.opera.setGeometry(QtCore.QRect(10, 60, 101, 17))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("ico/opera.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.opera.setIcon(icon6)
        self.opera.setObjectName("opera")
        self.operagx = QtWidgets.QCheckBox(self.InternetBrowser)
        self.operagx.setGeometry(QtCore.QRect(10, 80, 111, 17))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("ico/operagx.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.operagx.setIcon(icon7)
        self.operagx.setObjectName("operagx")
        self.Messaging = QtWidgets.QGroupBox(self.tab)
        self.Messaging.setGeometry(QtCore.QRect(320, 10, 151, 291))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Messaging.setFont(font)
        self.Messaging.setAlignment(QtCore.Qt.AlignCenter)
        self.Messaging.setObjectName("Messaging")
        self.discord = QtWidgets.QCheckBox(self.Messaging)
        self.discord.setGeometry(QtCore.QRect(10, 20, 101, 17))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("ico/discord_101785.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.discord.setIcon(icon8)
        self.discord.setObjectName("discord")
        self.zoom = QtWidgets.QCheckBox(self.Messaging)
        self.zoom.setGeometry(QtCore.QRect(10, 40, 131, 17))
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("ico/zoom_logo_icon_186898.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zoom.setIcon(icon9)
        self.zoom.setObjectName("zoom")
        self.thunderbird = QtWidgets.QCheckBox(self.Messaging)
        self.thunderbird.setGeometry(QtCore.QRect(10, 60, 131, 17))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("ico/thunderbird.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.thunderbird.setIcon(icon10)
        self.thunderbird.setObjectName("thunderbird")
        self.Utilities = QtWidgets.QGroupBox(self.tab)
        self.Utilities.setGeometry(QtCore.QRect(30, 340, 191, 261))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Utilities.setFont(font)
        self.Utilities.setAlignment(QtCore.Qt.AlignCenter)
        self.Utilities.setObjectName("Utilities")
        self.teamviewer = QtWidgets.QCheckBox(self.Utilities)
        self.teamviewer.setGeometry(QtCore.QRect(10, 20, 171, 17))
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("ico/TeamViewer.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.teamviewer.setIcon(icon11)
        self.teamviewer.setObjectName("teamviewer")
        self.cdburner = QtWidgets.QCheckBox(self.Utilities)
        self.cdburner.setGeometry(QtCore.QRect(10, 40, 171, 17))
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("ico/CDBurnerXp.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cdburner.setIcon(icon12)
        self.cdburner.setObjectName("cdburner")
        self.totalcommander = QtWidgets.QCheckBox(self.Utilities)
        self.totalcommander.setGeometry(QtCore.QRect(10, 60, 141, 17))
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("ico/TotalCommander.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.totalcommander.setIcon(icon13)
        self.totalcommander.setObjectName("totalcommander")
        self.DevTools = QtWidgets.QGroupBox(self.tab)
        self.DevTools.setGeometry(QtCore.QRect(320, 340, 151, 261))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DevTools.setFont(font)
        self.DevTools.setAlignment(QtCore.Qt.AlignCenter)
        self.DevTools.setObjectName("DevTools")
        self.filezilla = QtWidgets.QCheckBox(self.DevTools)
        self.filezilla.setGeometry(QtCore.QRect(10, 20, 101, 17))
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("ico/FileZilla.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.filezilla.setIcon(icon14)
        self.filezilla.setObjectName("filezilla")
        self.notepad = QtWidgets.QCheckBox(self.DevTools)
        self.notepad.setGeometry(QtCore.QRect(10, 40, 131, 17))
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("ico/Notepad++.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.notepad.setIcon(icon15)
        self.notepad.setObjectName("notepad")
        self.putty = QtWidgets.QCheckBox(self.DevTools)
        self.putty.setGeometry(QtCore.QRect(10, 60, 131, 17))
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("ico/PuTTY.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.putty.setIcon(icon16)
        self.putty.setObjectName("putty")
        self.Other = QtWidgets.QGroupBox(self.tab)
        self.Other.setGeometry(QtCore.QRect(580, 340, 201, 261))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Other.setFont(font)
        self.Other.setAlignment(QtCore.Qt.AlignCenter)
        self.Other.setObjectName("Other")
        self.zip = QtWidgets.QCheckBox(self.Other)
        self.zip.setGeometry(QtCore.QRect(10, 20, 161, 17))
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("ico/7zip.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zip.setIcon(icon17)
        self.zip.setIconSize(QtCore.QSize(16, 16))
        self.zip.setObjectName("zip")
        self.everything = QtWidgets.QCheckBox(self.Other)
        self.everything.setGeometry(QtCore.QRect(10, 40, 161, 17))
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("ico/Everything.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.everything.setIcon(icon18)
        self.everything.setObjectName("everything")
        self.torrent = QtWidgets.QCheckBox(self.Other)
        self.torrent.setGeometry(QtCore.QRect(10, 60, 181, 17))
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap("ico/QBitTorrent.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.torrent.setIcon(icon19)
        self.torrent.setObjectName("torrent")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setStyleSheet("border-color: #f8b195;\n"
"background: #f8b195;")
        self.tab_2.setObjectName("tab_2")
        self.widget = QtWidgets.QWidget(self.tab_2)
        self.widget.setGeometry(QtCore.QRect(240, 110, 290, 410))
        self.widget.setObjectName("widget")
        self.label_10 = QtWidgets.QLabel(self.widget)
        self.label_10.setGeometry(QtCore.QRect(0, 0, 290, 410))
        self.label_10.setStyleSheet("background-color:rgba(16, 30, 41, 240);\n"
"border-radius: 10px;\n"
"")
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.user_name = QtWidgets.QLineEdit(self.widget)
        self.user_name.setGeometry(QtCore.QRect(20, 210, 250, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.user_name.setFont(font)
        self.user_name.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border:1px solid rgba(0,0,0,0);\n"
"border-bottom-color:rgba(46,82,101,255);\n"
"color:rgb(255,255,255);\n"
"padding-bottom:7px")
        self.user_name.setObjectName("user_name")
        self.password = QtWidgets.QLineEdit(self.widget)
        self.password.setGeometry(QtCore.QRect(20, 260, 250, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.password.setFont(font)
        self.password.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border:1px solid rgba(0,0,0,0);\n"
"border-bottom-color:rgba(46,82,101,255);\n"
"color:rgb(255,255,255);\n"
"padding-bottom:7px")
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password.setObjectName("password")
        self.pushButton_7 = QtWidgets.QPushButton(self.widget)
        self.pushButton_7.setGeometry(QtCore.QRect(20, 320, 250, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.putty.hide()
        self.pushButton_7.setStyleSheet("QPushButton#pushButton{\n"
"background-color:rgba(2,65,118,255);\n"
"color:rgba(255,255,255,200);\n"
"border-radius: 5px;\n"
"}\n"
"QPushButton#pushButton:pressed{\n"
"padding-left: 5px;\n"
"padding-top: 5px;\n"
"background-color:rgba(2,65,118,100);\n"
"background=position:calc(100%-10px)center;\n"
"}\n"
"QPushButton#pushButton{\n"
"background-color:rgba(2,65,118,200);\n"
"}\n"
"")
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_11 = QtWidgets.QLabel(self.widget)
        self.label_11.setGeometry(QtCore.QRect(50, 30, 191, 161))
        self.label_11.setStyleSheet("background:transparent\n"
"")
        self.label_11.setText("")
        self.label_11.setTextFormat(QtCore.Qt.PlainText)
        self.label_11.setPixmap(QtGui.QPixmap("ico/pngaaa.com-4051919.png"))
        self.label_11.setScaledContents(True)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        with open("repozitorijum.json", 'r') as f:
            self.linkovi = json.loads(f.read())

        with open("argumenti.json", 'r') as f:
            self.argumenti = json.loads(f.read())

        with open('dinamicki_cb.json', 'r') as f:
            self.dinamicke = json.loads(f.read())

        self.cancel_button.clicked.connect(self.izadji)
        self.continue_button.clicked.connect(self.izaberi_skini_instaliraj)
        self.install_window()
        self.pushButton_7.clicked.connect(self.pass_check)
        self.admin_ui()
        self.temp()
        self.dinamika()
        self.update_ui()



    def install_window(self):
        """Install window UI"""

        self.prozor = QFrame()
        self.prozor.setWindowTitle('Download and Install')
        self.prozor.setWindowIcon(QtGui.QIcon('Ico/ikonica.png'))
        self.prozor.setGeometry(300, 300, 560, 181)
        self.progress = QProgressBar(self.prozor)
        self.progress.setGeometry(46, 79, 506, 41)
        self.finish_button = QPushButton("Finish", self.prozor)
        self.finish_button.setGeometry(223, 144, 133, 28)
        self.installing_label = QLabel(self.prozor)
        self.installing_label.setGeometry(180, 15, 267, 57)
        self.finish_button.setEnabled(False)

    def Handle_Progress(self, blocknum, blocksize, totalsize):
        """Racunanje progressa downloada"""
        data = blocknum * blocksize

        if totalsize > 0:
            download_percentage = int(data) * 100 // totalsize
            self.progress.setValue(download_percentage)
            QApplication.processEvents()

    def Download(self):
        """Downloadujem fajlove"""
        for i,j in self.izabrani_recnik.items():
            self.installing_label.setText(f'Downloading: {i}')
            urllib.request.urlretrieve(f'{j}', f'Data\\{i}', self.Handle_Progress)

    def Install(self):
        """instaliram fajlove"""
        for i, j in self.izabrani_sa_argumentima.items():
            self.installing_label.setText(f'Installing: {i}')
            QApplication.processEvents()
            os.system(f'Data\\{i} {j}')


    def Download_Install(self):
        """Pozivam Install_Window i pokrecem procese"""
        self.prozor.show()
        t1 = threading.Thread(target=self.Download(), args=())
        t2 = threading.Thread(target=self.Install(), args=())
        t1.start()
        t2.start()
        t2.join()
        self.finish_button.setEnabled(True)
        self.finish_button.clicked.connect(self.prozor.hide)


    def izaberi_skini_instaliraj(self):
        """Provera izabranih aplikacija, pokretanje celog Download_install procesa"""
        self.lista_boxova = [(self.filezilla,'FileZilla.exe'),(self.notepad,'Notepad++.exe'),(self.putty,'putty-64bit-0.76-installer.msi'),
                        (self.chrome,'GoogleChrome.exe'),(self.mozzila,'FirefoxSetup91.0.2.exe'),(self.opera,'Opera.exe'),(self.operagx,'OperaGX.exe'),
                        (self.gom,'GOMPlayer.exe'),(self.vlc,'vlc-3.0.16-win32.exe'),(self.winamp,'winamp.exe'),(self.discord,'Discord.exe'),
                        (self.thunderbird,'Thunderbird.exe'), (self.zoom,'Zoom.msi'), (self.everything,'Everything.exe'),
                        (self.torrent,'qBitTorrent.exe'), (self.zip,'7zip.exe'), (self.cdburner,'cdburnerxp.exe'),
                        (self.teamviewer,'TeamViewer_Setup_x64.exe'),(self.totalcommander,'TotalCommander.exe')]
        
        self.lista_izabranih = []
        self.izabrani_recnik = {}
        self.izabrani_sa_argumentima = {}

        for i,j in self.lista_boxova:
            if i.isChecked():
                self.lista_izabranih.append(j)
            else:
                continue
        for i,j in self.temp_cb:
            if i.isChecked():
                self.lista_izabranih.append(j)
        if len(self.lista_izabranih) == 0:
            self.no_app()
        
        else:
            for i in self.lista_izabranih:
                self.izabrani_recnik[i] = self.linkovi[i]

            for i in self.lista_izabranih:
                self.izabrani_sa_argumentima[i] = self.argumenti[i]

            self.Download_Install()




    def temp(self):
        """privremena lista za proveru novo dodatih checkBoxova"""
        self.temp_cb = []

    def dinamika(self):
        """Hard kodovani prazni checkBox objekti koji se kasnije popunjavaju"""
        self.cb_1 = QCheckBox(self.InternetBrowser)
        self.cb_1.setGeometry(10, 100, 171, 17)
        self.cb_1.setText(None)
        ikonica_1 = QtGui.QIcon()
        ikonica_1.addPixmap(QtGui.QPixmap('ico/ikonica.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cb_1.setIcon(ikonica_1)
        self.cb_1.setIconSize(QtCore.QSize(16, 16))
        self.cb_1.hide()

        self.cb_2 = QCheckBox(self.Messaging)
        self.cb_2.setGeometry(10, 80, 171, 17)
        self.cb_2.setText(None)
        ikonica_2 = QtGui.QIcon()
        ikonica_2.addPixmap(QtGui.QPixmap('ico/ikonica.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cb_2.setIcon(ikonica_2)
        self.cb_2.setIconSize(QtCore.QSize(16, 16))
        self.cb_2.hide()

        self.cb_3 = QCheckBox(self.Media)
        self.cb_3.setGeometry(10, 80, 171, 17)
        self.cb_3.setText(None)
        ikonica_3 = QtGui.QIcon()
        ikonica_3.addPixmap(QtGui.QPixmap('ico/ikonica.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cb_3.setIcon(ikonica_3)
        self.cb_3.setIconSize(QtCore.QSize(16, 16))
        self.cb_3.hide()

        self.cb_4 = QCheckBox(self.DevTools)
        self.cb_4.setGeometry(10, 60, 171, 17)
        self.cb_4.setText(None)
        ikonica_4 = QtGui.QIcon()
        ikonica_4.addPixmap(QtGui.QPixmap('ico/ikonica.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cb_4.setIcon(ikonica_4)
        self.cb_4.setIconSize(QtCore.QSize(16, 16))
        self.cb_4.hide()

        self.cb_5 = QCheckBox(self.Utilities)
        self.cb_5.setGeometry(10, 80, 171, 17)
        self.cb_5.setText(None)
        ikonica_5 = QtGui.QIcon()
        ikonica_5.addPixmap(QtGui.QPixmap('ico/ikonica.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cb_5.setIcon(ikonica_5)
        self.cb_5.setIconSize(QtCore.QSize(16, 16))
        self.cb_5.hide()

        self.cb_6 = QCheckBox(self.Other)
        self.cb_6.setGeometry(10, 80, 171, 17)
        self.cb_6.setText(None)
        ikonica_6 = QtGui.QIcon()
        ikonica_6.addPixmap(QtGui.QPixmap('ico/ikonica.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cb_6.setIcon(ikonica_6)
        self.cb_6.setIconSize(QtCore.QSize(16, 16))
        self.cb_6.hide()



    def hash_pass(self,password_for_hash):
        """Hashovanje admin sifre"""
        hash1=hashlib.md5(password_for_hash.encode('UTF-8'))
        return hash1.hexdigest()

    def pass_check(self):
        """Provera admin login forme i pokretanje Admin_UI"""
        with open('Data\\user.txt', 'r') as f:
            user = f.readline().strip()
            password_true = f.readline().strip()

        if self.user_name.text() == user and self.hash_pass(self.password.text()) == password_true:
            # MainWindow.hide()
            self.admin_prozor.show()
            self.admin_warning()
            self.pushButton_add.clicked.connect(self.generisi_json)
            self.pushButton_log_out.clicked.connect(self.sakriti)
        else:
            msg = QMessageBox()
            msg.setWindowTitle("ALERT!")
            msg.setText("Wrong username or password!")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.buttonClicked.connect(msg.hide)
            msg.exec_()



    def admin_ui(self):
        """Ceo admin interface"""
        self.admin_prozor = QFrame()
        self.admin_prozor.setWindowTitle("Admin mode")
        self.admin_prozor.setObjectName("ADMIN")
        self.admin_prozor.setGeometry(300,300,607,379)
        self.tabular = QTabWidget(self.admin_prozor)
        self.tabular.setGeometry(QtCore.QRect(0,0,601,351))
        self.tabular.setObjectName("tabular")
        self.add_tab = QWidget()
        self.add_tab.setObjectName("add_tab")
        self.comboBox = QComboBox(self.add_tab)
        self.comboBox.setGeometry(QtCore.QRect(120,10,191,22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("InternetBrowser")
        self.comboBox.addItem("Messaging")
        self.comboBox.addItem("Media")
        self.comboBox.addItem("Utilities")
        self.comboBox.addItem("DevTools")
        self.comboBox.addItem("Other")

        self.lineEdit_1 = QLineEdit(self.add_tab)
        self.lineEdit_1.setGeometry(QtCore.QRect(60,50,290,20))
        self.lineEdit_1.setMinimumSize(QtCore.QSize(170,0))

        self.lineEdit_1.setObjectName("lineEdit_1")
        self.lineEdit_1.setToolTip("Example: AutoWizzardInstaller.exe/AutoWizzardInstaller.msi")
        self.label_1 = QLabel(self.add_tab)
        self.label_1.setGeometry(QtCore.QRect(4,50,50,20))
        self.label_1.setMinimumSize(QtCore.QSize(50,5))
        self.label_1.setText("Name:")
        self.label_1.setObjectName("label_1")

        self.label_2 = QLabel(self.add_tab)
        self.label_2.setGeometry(QtCore.QRect(4, 90, 50, 20))
        self.label_2.setMinimumSize(QtCore.QSize(50, 5))
        self.label_2.setText("Link:")
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.add_tab)
        self.lineEdit_2.setGeometry(QtCore.QRect(60, 90, 290, 20))
        self.lineEdit_2.setMinimumSize(QtCore.QSize(170, 0))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setToolTip("Example: https:\\www.AutoWizzard.com/download/AutoWizzard.exe")

        self.label_3 = QLabel(self.add_tab)
        self.label_3.setGeometry(QtCore.QRect(4, 130, 50, 20))
        self.label_3.setMinimumSize(QtCore.QSize(50, 5))
        self.label_3.setObjectName("label_3")
        self.label_3.setText("Arguments:")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.add_tab)
        self.lineEdit_3.setGeometry(QtCore.QRect(60, 130, 290, 20))
        self.lineEdit_3.setMinimumSize(QtCore.QSize(170, 0))
        self.lineEdit_3.setToolTip("Example: /S -install -noreset")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")

        self.label_4 = QLabel(self.add_tab)
        self.label_4.setGeometry(QtCore.QRect(4, 170, 50, 20))
        self.label_4.setMinimumSize(QtCore.QSize(50, 5))
        self.label_4.setObjectName("label_4")
        self.label_4.setText("Icon Path:")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.add_tab)
        self.lineEdit_4.setToolTip("Example: Ico/app_icon.ico(.png)")
        self.lineEdit_4.setGeometry(QtCore.QRect(60, 170, 290, 20))
        self.lineEdit_4.setMinimumSize(QtCore.QSize(170, 0))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.add_tab)
        self.textBrowser.setText("""
Welcome to AutoWizzard Admin mode!
This part of the application will allow you
to add new applications to the program
and to remove newly added applications!
WARNING:
Every app has one or more arguments
for silent install, so do your research!
The icon should be placed into the Ico
directory that you can find in the root
directory for AutoWizzard, otherwise,
specify whole path to the icon.
Use wisely, Wizzard!
        """)
        self.textBrowser.setGeometry(QtCore.QRect(370, 0, 211, 192))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton_add = QtWidgets.QPushButton(self.add_tab)
        self.pushButton_add.setText("Add App")
        self.pushButton_add.setGeometry(QtCore.QRect(130, 250, 131, 41))
        self.pushButton_add.setObjectName("pushButton_add")
        self.pushButton_log_out = QtWidgets.QPushButton(self.add_tab)
        self.pushButton_log_out.setText("L o g   O u t")
        self.pushButton_log_out.setGeometry(QtCore.QRect(340, 250, 131, 41))
        self.pushButton_log_out.setObjectName("pushButton_log_out")


        self.remove_tab = QWidget()
        self.remove_tab.setObjectName('remove_tab')
        self.remove_button = QPushButton(self.remove_tab)
        self.remove_button.setGeometry(QtCore.QRect(150,270,111,51))
        self.remove_button.setText('Remove App')
        self.remove_button.clicked.connect(self.remove_element)

        self.log_out_button = QPushButton(self.remove_tab)
        self.log_out_button.setGeometry(QtCore.QRect(370, 270, 111, 51))
        self.log_out_button.setText('L o g  o u t')
        self.log_out_button.clicked.connect(self.sakriti)

        self.text_browser_warning = QTextBrowser(self.remove_tab)
        self.text_browser_warning.setObjectName('warning_text_browser')
        self.text_browser_warning.setGeometry(QtCore.QRect(330,20,256,131))

        self.text_browser_lista = QTextBrowser(self.remove_tab)
        self.text_browser_lista.setObjectName('lista_text_browser')
        self.text_browser_lista.setGeometry(QtCore.QRect(20, 20, 256, 131))
        self.refresh_button = QPushButton(self.remove_tab)
        self.refresh_button.setGeometry(QtCore.QRect(280, 70, 31, 21))
        ikonica_1 = QtGui.QIcon()
        ikonica_1.addPixmap(QtGui.QPixmap('ico/refresh.ico'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.refresh_button.setIcon(ikonica_1)
        self.refresh_button.clicked.connect(self.refresh_list)

        self.widget_remove_tab = QWidget(self.remove_tab)
        self.widget_remove_tab.setObjectName(u"widget_remove_tab")
        self.widget_remove_tab.setGeometry(QtCore.QRect(10, 190, 271, 51))
        self.horizontalLayout_remove_tab = QHBoxLayout(self.widget_remove_tab)
        self.horizontalLayout_remove_tab.setObjectName(u"horizontalLayout_remove_tab")
        self.horizontalLayout_remove_tab.setContentsMargins(0, 0, 0, 0)
        self.label_remove_tab = QLabel(self.widget_remove_tab)
        self.label_remove_tab.setObjectName(u"label")
        self.label_remove_tab.setText("App Name:")

        self.horizontalLayout_remove_tab.addWidget(self.label_remove_tab)

        self.lineEdit_remove_tab = QLineEdit(self.widget)
        self.lineEdit_remove_tab.setObjectName(u"lineEdit_remove_tab")

        self.horizontalLayout_remove_tab.addWidget(self.lineEdit_remove_tab)

        self.text_browser_warning.setText("""
WARNING:
Remove app only works for the newly added apps,
so you have to give the specific name of the newly
added app that will be removed from the application.
        """)
        s = 'List of newely added apps:\n'
        for i in self.dinamicke.keys():
            s += i
            s += '\n'
        self.text_browser_lista.setText(s)

        self.tabular.addTab(self.add_tab, "Add App")
        self.tabular.addTab(self.remove_tab, "Remove App")
        self.tabular.setCurrentIndex(0)


    def generisi_json(self):
        """Generisanje podataka o novo dodatim aplikacijama"""
        if self.lineEdit_1.text() != '' and self.lineEdit_2.text() != '' and self.lineEdit_3.text() != '':
            self.lista_dinamickih = []
            self.lista_dinamickih.append(self.comboBox.currentText())
            self.lista_dinamickih.append(self.lineEdit_1.text())
            self.lista_dinamickih.append(self.lineEdit_2.text())
            self.lista_dinamickih.append(self.lineEdit_3.text())
            self.lista_dinamickih.append(self.lineEdit_4.text())
            self.dinamicke[self.lineEdit_1.text()] = self.lista_dinamickih
            json_dump = json.dumps(self.dinamicke, indent=2)
            with open('dinamicki_cb.json', 'w') as f:
                f.write(json_dump)
        else:
            self.missing_elements()

    def update_ui(self):
        """Osvezava ui i dodaje nove aplikacije"""
        if len(self.dinamicke) !=0:
            for k,v in self.dinamicke.items():
                if v[0] == 'InternetBrowser':
                    self.cb_1.setText(v[1])
                    self.linkovi[v[1]] = v[2]
                    self.argumenti[v[1]] = v[3]
                    ikonica_1 = QtGui.QIcon()
                    ikonica_1.addPixmap(QtGui.QPixmap(v[4]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    self.cb_1.setIcon(ikonica_1)
                    self.temp_cb.append((self.cb_1, v[1]))
                    self.cb_1.show()

                if v[0] == 'Messaging':
                    self.cb_2.setText(v[1])
                    self.linkovi[v[1]] = v[2]
                    self.argumenti[v[1]] = v[3]
                    ikonica_2 = QtGui.QIcon()
                    ikonica_2.addPixmap(QtGui.QPixmap(v[4]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    self.cb_2.setIcon(ikonica_2)
                    self.temp_cb.append((self.cb_2, v[1]))
                    self.cb_2.show()

                if v[0] == 'Media':
                    self.cb_3.setText(v[1])
                    self.linkovi[v[1]] = v[2]
                    self.argumenti[v[1]] = v[3]
                    ikonica_3 = QtGui.QIcon()
                    ikonica_3.addPixmap(QtGui.QPixmap(v[4]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    self.cb_3.setIcon(ikonica_3)
                    self.temp_cb.append((self.cb_3, v[1]))
                    self.cb_3.show()

                if v[0] == 'DevTools':
                    self.cb_4.setText(v[1])
                    self.linkovi[v[1]] = v[2]
                    self.argumenti[v[1]] = v[3]
                    ikonica_4 = QtGui.QIcon()
                    ikonica_4.addPixmap(QtGui.QPixmap(v[4]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    self.cb_4.setIcon(ikonica_4)
                    self.temp_cb.append((self.cb_4, v[1]))
                    self.cb_4.show()

                if v[0] == 'Utilities':
                    self.cb_5.setText(v[1])
                    self.linkovi[v[1]] = v[2]
                    self.argumenti[v[1]] = v[3]
                    ikonica_5 = QtGui.QIcon()
                    ikonica_5.addPixmap(QtGui.QPixmap(v[4]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    self.cb_5.setIcon(ikonica_5)
                    self.temp_cb.append((self.cb_5, v[1]))
                    self.cb_5.show()

                if v[0] == 'Other':
                    self.cb_6.setText(v[1])
                    self.linkovi[v[1]] = v[2]
                    self.argumenti[v[1]] = v[3]
                    ikonica_6 = QtGui.QIcon()
                    ikonica_6.addPixmap(QtGui.QPixmap(v[4]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                    self.cb_6.setIcon(ikonica_6)
                    self.temp_cb.append((self.cb_6, v[1]))
                    self.cb_6.show()
        else:
            self.cb_1.hide()
            self.cb_2.hide()
            self.cb_3.hide()
            self.cb_4.hide()
            self.cb_5.hide()
            self.cb_6.hide()


    def remove_element(self):
        """Uklanja novo dodate elemente"""
        if self.lineEdit_remove_tab.text() in self.dinamicke.keys():

            if self.dinamicke[self.lineEdit_remove_tab.text()][0] == 'InternetBrowser':
                self.cb_1.hide()


            if self.dinamicke[self.lineEdit_remove_tab.text()][0] == 'Messaging':
                self.cb_2.hide()


            if self.dinamicke[self.lineEdit_remove_tab.text()][0] == 'Media':
                self.cb_3.hide()


            if self.dinamicke[self.lineEdit_remove_tab.text()][0] == 'Utilities':
                self.cb_4.hide()


            if self.dinamicke[self.lineEdit_remove_tab.text()][0] == 'DevTools':
                self.cb_5.hide()


            if self.dinamicke[self.lineEdit_remove_tab.text()][0] == 'Other':
                self.cb_6.hide()

            del self.dinamicke[self.lineEdit_remove_tab.text()]
            del self.linkovi[self.lineEdit_remove_tab.text()]
            del self.argumenti[self.lineEdit_remove_tab.text()]


            s = 'List of newely added apps:\n'
            for i in self.dinamicke.keys():
                s += i
                s += '\n'
            self.text_browser_lista.setText(s)
            json_dump = json.dumps(self.dinamicke,indent=2)
            with open('dinamicki_cb.json', 'w') as f:
                f.write(json_dump)
        else:
            self.key_missing()


    def refresh_list(self):
        """Osvezava listu novo dodatih aplikacija u Remove tab delu admin interfejsa"""
        s = 'List of newely added apps:\n'
        for i in self.dinamicke.keys():
            s += i
            s += '\n'
        self.text_browser_lista.setText(s)

    def sakriti(self):
        """osvezava UI i gasi admin interfejs"""
        self.update_ui()
        self.admin_prozor.hide()


    def izadji(self):
        """Exit dialog"""
        msg = QMessageBox()
        msg.setWindowTitle("Exit")
        msg.setText("Are you sure that you want to exit from AutoWizzard?")
        msg.setIcon(QMessageBox.Question)
        msg.setStandardButtons(QMessageBox.No|QMessageBox.Yes)
        msg.setDefaultButton(QMessageBox.No)
        msg.buttonClicked.connect(self.popup_button)
        msg.exec_()

    def no_app(self):
        """Upozorenje za 0 odabranih aplikacija"""
        msg = QMessageBox()
        msg.setWindowTitle("ALERT!")
        msg.setText("No apps were selected!")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.buttonClicked.connect(msg.hide)
        msg.exec_()

    def admin_warning(self):
        """Obavestenje o admin modu"""
        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText("WARNING: Admin mode is still in alpha testing, only one app per category can be added!")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.buttonClicked.connect(msg.hide)
        msg.exec_()

    def key_missing(self):
        """Upozorenje o brisanju nepostojeceg elementa"""
        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText("WARNING: You are trying to remove a non-existing app!")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.buttonClicked.connect(msg.hide)
        msg.exec_()

    def missing_elements(self):
        """Upozorenje o dodavanju aplikacije bez dovoljno informacija"""
        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText("WARNING: You are trying to add an app with insufficient information!!")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.buttonClicked.connect(msg.hide)
        msg.exec_()

    def popup_button(self,i):
        """Izlazi iz aplikacije preko Exit dialog boxa"""

        if i.text() == '&No':
            pass
        else:
            exit(0)






    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AutoWizzard"))
        self.continue_button.setText(_translate("MainWindow", "Continue"))
        self.cancel_button.setText(_translate("MainWindow", "Cancel"))
        self.Media.setTitle(_translate("MainWindow", "Media"))
        self.vlc.setToolTip(_translate("MainWindow", "<html><head/><body><p>VLC media player (previously the VideoLAN Client and commonly known as simply VLC) is a free and open-source, portable, cross-platform media player software and streaming media server developed by the VideoLAN project.</p></body></html>"))
        self.vlc.setText(_translate("MainWindow", "VLC Media Player"))
        self.gom.setToolTip(_translate("MainWindow", "<html><head/><body><p>GOM Player is a media player for Windows, developed by GOM &amp; Company. Its main features include the ability to play some broken media files and find missing codecs using a codec finder service.</p></body></html>"))
        self.gom.setText(_translate("MainWindow", "GOM Media Player"))
        self.winamp.setToolTip(_translate("MainWindow", "<html><head/><body><p>Winamp is a media player for Microsoft Windows originally developed by Justin Frankel and Dmitry Boldyrev by their company Nullsoft</p></body></html>"))
        self.winamp.setText(_translate("MainWindow", "Winamp Media Player"))
        self.label.setText(_translate("MainWindow", "Welcome to AutoWizzard, use wisely!"))
        self.InternetBrowser.setTitle(_translate("MainWindow", "Internet Browser"))
        self.mozzila.setToolTip(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Mozilla Firefox</span> or simply <span style=\" font-weight:600;\">Firefox</span>, is a free and open-source web browser developed by the Mozzila Foundation and its subsidiary, the Mozzila Corporation. Firefox uses the Gecko rendering engine to display web pages</p></body></html>"))
        self.mozzila.setText(_translate("MainWindow", "Mozzila Firefox"))
        self.chrome.setToolTip(_translate("MainWindow", "<html><head/><body><p>Google Chrome, or Chrome, developed by Google, is an internet browser used to browse web pages with ease.</p></body></html>"))
        self.chrome.setText(_translate("MainWindow", "Google Chrome"))
        self.opera.setToolTip(_translate("MainWindow", "<html><head/><body><p>Opera is <span style=\" font-weight:600;\">a multi-platform web browser developed by Opera Software</span>. Opera is a Chromium-based browser. It distinguishes itself from other browsers through its user interface and other features.</p></body></html>"))
        self.opera.setText(_translate("MainWindow", "Opera"))
        self.operagx.setToolTip(_translate("MainWindow", "<html><head/><body><p>Opera GX is a special version of the Opera browser built specifically for gamers. The browser includes unique features like CPU, RAM and Network limiters to help you get the most out of both gaming and browsing. </p></body></html>"))
        self.operagx.setText(_translate("MainWindow", "Opera GX"))
        self.Messaging.setTitle(_translate("MainWindow", "Messaging"))
        self.discord.setToolTip(_translate("MainWindow", "<html><head/><body><p>Discord is a VoIP, instant messaging and digital distribution platform designed for creating communities</p></body></html>"))
        self.discord.setText(_translate("MainWindow", "Discord"))
        self.zoom.setToolTip(_translate("MainWindow", "<html><head/><body><p>Zoom is a cloud-based video communications app that allows you to set up virtual video and audio conferencing, webinars, live chats, screen-sharing, and other collaborative capabilities.</p></body></html>"))
        self.zoom.setText(_translate("MainWindow", "Zoom meetings"))
        self.thunderbird.setToolTip(_translate("MainWindow", "<html><head/><body><p>Mozilla Thunderbird is a free and open-source cross-platform email client, personal<span style=\" font-weight:600;\"/>information<span style=\" font-weight:600;\"/>manager, news client, RSS and chat client developed by the Mozilla Foundation.</p></body></html>"))
        self.thunderbird.setText(_translate("MainWindow", "Thunderbird"))
        self.Utilities.setTitle(_translate("MainWindow", "Utilities"))
        self.teamviewer.setToolTip(_translate("MainWindow", "<html><head/><body><p>TeamViewer is remote access and remote control computer software, allowing maintenance of computers and other devices. TeamViewer is proprietary software, but does not require registration and is free of charge for non-commercial use.</p></body></html>"))
        self.teamviewer.setText(_translate("MainWindow", "TeamViewer"))
        self.cdburner.setToolTip(_translate("MainWindow", "<html><head/><body><p>CDBurnerXP  is a freeware that is highly recommended to use as disc burning software for Windows. It is popular software to burn all kinds of discs that include HD-DVDs, Blu-Rays, regular DVDs, and even CDs.</p></body></html>"))
        self.cdburner.setText(_translate("MainWindow", "CDBurnerXP"))
        self.totalcommander.setToolTip(_translate("MainWindow", "<html><head/><body><p>Total Commander is a file manager for Windows, a program like Windows Explorer to copy, move or delete files. However, Total Commander can do much more than Explorer, e.g. pack and unpack files, access ftp servers, compare files by content, etc!</p></body></html>"))
        self.totalcommander.setText(_translate("MainWindow", "TotalCommander"))
        self.DevTools.setTitle(_translate("MainWindow", "Developer Tools"))
        self.filezilla.setToolTip(_translate("MainWindow", "<html><head/><body><p>FileZilla is a free, open source file transfer protocol (FTP) software tool that allows users to set up FTP servers or connect to other FTP servers in order to exchange files. FileZilla traditionally supported File Transfer Protocol over Transport Layer Security </p></body></html>"))
        self.filezilla.setText(_translate("MainWindow", "FileZilla"))
        self.notepad.setToolTip(_translate("MainWindow", "<html><head/><body><p>Notepad++ is a text and source code editor for use with Microsoft Windows. It supports tabbed editing, which allows working with multiple open files in a single window. The project\'s name comes from the C increment operator.</p></body></html>"))
        self.notepad.setText(_translate("MainWindow", "Notepad++"))
        self.putty.setToolTip(_translate("MainWindow", "<html><head/><body><p>PuTTY is a free and open-source terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet, rlogin, and raw socket connection. It can also connect to a serial port.</p></body></html>"))
        self.putty.setText(_translate("MainWindow", "PuTTY"))
        self.Other.setTitle(_translate("MainWindow", "Other"))
        self.zip.setToolTip(_translate("MainWindow", "<html><head/><body><p>7-Zip is a free and open-source file archiver, a utility used to place groups of files within compressed containers known as &quot;archives&quot;.</p></body></html>"))
        self.zip.setText(_translate("MainWindow", "7-Zip"))
        self.everything.setToolTip(_translate("MainWindow", "<html><head/><body><p>Everything is an easy-to-use search application that can help you find any file or folder stored on your Windows computer. It only takes a few seconds to locate data from an unorganized storage space.</p></body></html>"))
        self.everything.setText(_translate("MainWindow", "SearchEverything"))
        self.torrent.setToolTip(_translate("MainWindow", "<html><head/><body><p>qBittorrent is a cross-platform free and open-source BitTorrent client.</p></body></html>"))
        self.torrent.setText(_translate("MainWindow", "qBittorrent"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Install"))
        self.user_name.setPlaceholderText(_translate("MainWindow", "User Name"))
        self.password.setPlaceholderText(_translate("MainWindow", "Password"))
        self.pushButton_7.setText(_translate("MainWindow", "L o g  I n"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Login"))





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
